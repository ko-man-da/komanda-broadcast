import asyncio
import logging
import os
from datetime import datetime
from typing import List, Dict, Any, Optional

import asyncpg
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ChatType
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import Chat, ChatMember
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv

dotenv_path = os.path.join(os.path.dirname(__file__), '.env')
if os.path.exists(dotenv_path):
    load_dotenv(dotenv_path)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID =  os.getenv("ADMIN_ID")
TARGET_CHAT_ID =  os.getenv("TARGET_CHAT_ID")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_CONFIG = {
    'database': os.getenv("DB_NAME", "invite_bot"),
    'user': os.getenv("DB_USER", "postgres"),
    'password': os.getenv("DB_PASSWORD", "wellcometotheworld"),
    'host': os.getenv("DB_HOST", "localhost"),
    'port': int(os.getenv("DB_PORT", "5432"))
}


# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
BROADCAST_SETTINGS = {
    "to_target_chat": True,  # –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ —Ü–µ–ª–µ–≤–æ–π —á–∞—Ç
    "to_target_chat_members": True,  # –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞ –≤ –ª–∏—á–∫—É
    "to_network_chats": True,  # –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ —Å–µ—Ç–∫—É —á–∞—Ç–æ–≤
    "network_chat_mode": "all",  # "all", "members_only", "specific_chats"
    "selected_chats": [],  # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —á–∞—Ç—ã
    "available_chats": {}  # –î–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Ç—ã –≥–¥–µ –µ—Å—Ç—å –±–æ—Ç
}

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
db_pool = None


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class AdminStates(StatesGroup):
    waiting_broadcast_text = State()
    confirming_broadcast = State()
    selecting_network_chats = State()


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def init_db():
    global db_pool
    db_pool = await asyncpg.create_pool(**DB_CONFIG)

    async with db_pool.acquire() as conn:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await conn.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id BIGINT PRIMARY KEY,
                username VARCHAR(255),
                first_name VARCHAR(255),
                last_name VARCHAR(255),
                is_bot BOOLEAN DEFAULT FALSE,
                joined_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–æ–≤
        await conn.execute('''
            CREATE TABLE IF NOT EXISTS chat_members (
                user_id BIGINT,
                chat_id BIGINT,
                status VARCHAR(50),
                joined_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                PRIMARY KEY (user_id, chat_id)
            )
        ''')

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —á–∞—Ç–æ–≤ –±–æ—Ç–∞
        await conn.execute('''
            CREATE TABLE IF NOT EXISTS bot_chats (
                chat_id BIGINT PRIMARY KEY,
                chat_title VARCHAR(500),
                chat_type VARCHAR(50),
                members_count INTEGER DEFAULT 0,
                last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')

        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        await conn.execute('CREATE INDEX IF NOT EXISTS idx_users_is_bot ON users (is_bot)')
        await conn.execute('CREATE INDEX IF NOT EXISTS idx_chat_members_chat_id ON chat_members (chat_id)')
        await conn.execute('CREATE INDEX IF NOT EXISTS idx_chat_members_user_id ON chat_members (user_id)')


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
async def add_user(user_id: int, username: str = None, first_name: str = None,
                   last_name: str = None, is_bot: bool = False):
    async with db_pool.acquire() as conn:
        await conn.execute('''
            INSERT INTO users (user_id, username, first_name, last_name, is_bot)
            VALUES ($1, $2, $3, $4, $5)
            ON CONFLICT (user_id) DO UPDATE SET
                username = EXCLUDED.username,
                first_name = EXCLUDED.first_name,
                last_name = EXCLUDED.last_name,
                is_bot = EXCLUDED.is_bot
        ''', user_id, username, first_name, last_name, is_bot)


async def add_chat_member(user_id: int, chat_id: int, status: str = "member"):
    async with db_pool.acquire() as conn:
        await conn.execute('''
            INSERT INTO chat_members (user_id, chat_id, status)
            VALUES ($1, $2, $3)
            ON CONFLICT (user_id, chat_id) DO UPDATE SET
                status = EXCLUDED.status,
                joined_date = CURRENT_TIMESTAMP
        ''', user_id, chat_id, status)


async def remove_chat_member(user_id: int, chat_id: int):
    """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞"""
    async with db_pool.acquire() as conn:
        await conn.execute('''
            DELETE FROM chat_members 
            WHERE user_id = $1 AND chat_id = $2
        ''', user_id, chat_id)


async def add_bot_chat(chat_id: int, title: str, chat_type: str, members_count: int = 0):
    async with db_pool.acquire() as conn:
        await conn.execute('''
            INSERT INTO bot_chats (chat_id, chat_title, chat_type, members_count, last_updated)
            VALUES ($1, $2, $3, $4, CURRENT_TIMESTAMP)
            ON CONFLICT (chat_id) DO UPDATE SET
                chat_title = EXCLUDED.chat_title,
                chat_type = EXCLUDED.chat_type,
                members_count = EXCLUDED.members_count,
                last_updated = CURRENT_TIMESTAMP
        ''', chat_id, title, chat_type, members_count)


async def get_all_users() -> List[int]:
    async with db_pool.acquire() as conn:
        rows = await conn.fetch('SELECT user_id FROM users WHERE is_bot = FALSE')
        return [row['user_id'] for row in rows]


async def get_chat_members(chat_id: int) -> List[int]:
    async with db_pool.acquire() as conn:
        rows = await conn.fetch('SELECT user_id FROM chat_members WHERE chat_id = $1', chat_id)
        return [row['user_id'] for row in rows]


# –ù–û–í–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è: –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∞–ª–∏ –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º
async def get_target_chat_users() -> List[int]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–ª—è—é—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞ –ò –Ω–∞—á–∞–ª–∏ –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º"""
    async with db_pool.acquire() as conn:
        rows = await conn.fetch('''
            SELECT DISTINCT cm.user_id 
            FROM chat_members cm
            JOIN users u ON cm.user_id = u.user_id
            WHERE cm.chat_id = $1 AND u.is_bot = FALSE
        ''', TARGET_CHAT_ID)
        return [row['user_id'] for row in rows]


async def get_bot_chats() -> Dict[int, Dict[str, Any]]:
    async with db_pool.acquire() as conn:
        rows = await conn.fetch('SELECT chat_id, chat_title, chat_type, members_count FROM bot_chats')
        chats = {}
        for row in rows:
            chats[row['chat_id']] = {
                'title': row['chat_title'],
                'type': row['chat_type'],
                'members_count': row['members_count']
            }
        return chats


async def remove_bot_chat(chat_id: int):
    async with db_pool.acquire() as conn:
        await conn.execute('DELETE FROM bot_chats WHERE chat_id = $1', chat_id)


async def get_user_statistics():
    async with db_pool.acquire() as conn:
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_count = await conn.fetchval('SELECT COUNT(*) FROM users WHERE is_bot = FALSE')

        # –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞
        target_chat_members = await conn.fetchval(
            'SELECT COUNT(*) FROM chat_members WHERE chat_id = $1', TARGET_CHAT_ID
        )

        # –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∞–ª–∏ –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º
        target_chat_users = await conn.fetchval('''
            SELECT COUNT(DISTINCT cm.user_id) 
            FROM chat_members cm
            JOIN users u ON cm.user_id = u.user_id
            WHERE cm.chat_id = $1 AND u.is_bot = FALSE
        ''', TARGET_CHAT_ID)

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤
        chats_count = await conn.fetchval('SELECT COUNT(*) FROM bot_chats')

        # –¢–æ–ø 5 —á–∞—Ç–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        top_chats = await conn.fetch('''
            SELECT chat_title, members_count 
            FROM bot_chats 
            ORDER BY members_count DESC 
            LIMIT 5
        ''')

        return {
            'users_count': users_count,
            'target_chat_members': target_chat_members,
            'target_chat_users': target_chat_users,
            'chats_count': chats_count,
            'top_chats': top_chats
        }


# –§—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞
async def sync_target_chat_members(progress_callback=None):
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.
    –£–¥–∞–ª—è–µ—Ç –∏–∑ –±–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∫–∏–Ω—É–ª–∏ —á–∞—Ç.
    """
    try:
        if progress_callback:
            await progress_callback("üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞...")

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ Telegram API
        current_members = set()

        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
            chat_info = await bot.get_chat(TARGET_CHAT_ID)

            # –î–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤ –∏–ª–∏ –∫–∞–Ω–∞–ª–æ–≤, –ø–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ administrators
            try:
                administrators = await bot.get_chat_administrators(TARGET_CHAT_ID)
                for admin in administrators:
                    if not admin.user.is_bot:
                        current_members.add(admin.user.id)
            except Exception:
                pass

            # –î–ª—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            if chat_info.type == ChatType.SUPERGROUP:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                    member_count = await bot.get_chat_member_count(TARGET_CHAT_ID)
                    if progress_callback:
                        await progress_callback(f"üìä –í —á–∞—Ç–µ {member_count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")

                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
                    await add_bot_chat(TARGET_CHAT_ID, chat_info.title, chat_info.type, member_count)

                except Exception as e:
                    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            db_members = await get_chat_members(TARGET_CHAT_ID)

            if progress_callback:
                await progress_callback(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ {len(db_members)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            removed_count = 0
            for user_id in db_members:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ
                    member = await bot.get_chat_member(TARGET_CHAT_ID, user_id)

                    if member.status in ['left', 'kicked']:
                        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç –∏–ª–∏ –±—ã–ª –∏—Å–∫–ª—é—á–µ–Ω
                        await remove_chat_member(user_id, TARGET_CHAT_ID)
                        removed_count += 1
                        logging.info(f"–£–¥–∞–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ {TARGET_CHAT_ID}")
                    else:
                        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å–µ –µ—â–µ –≤ —á–∞—Ç–µ, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                        await add_chat_member(user_id, TARGET_CHAT_ID, member.status)
                        current_members.add(user_id)

                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ API
                    await asyncio.sleep(0.1)

                except Exception as e:
                    # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ,
                    # —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –æ–Ω –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç
                    await remove_chat_member(user_id, TARGET_CHAT_ID)
                    removed_count += 1
                    logging.warning(f"–£–¥–∞–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (–æ—à–∏–±–∫–∞ API): {e}")

            if progress_callback:
                await progress_callback(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {removed_count}")

            return {
                'removed_count': removed_count,
                'current_members': len(current_members),
                'db_members_before': len(db_members)
            }

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ {TARGET_CHAT_ID}: {e}")
            if progress_callback:
                await progress_callback(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —á–∞—Ç–∞: {e}")
            return None

    except Exception as e:
        logging.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
        if progress_callback:
            await progress_callback(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
        return None


# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–∞—Ö
async def update_available_chats():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤ –≥–¥–µ –µ—Å—Ç—å –±–æ—Ç"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —á–∞—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        bot_chats = await get_bot_chats()

        updated_chats = {}
        removed_count = 0

        if not bot_chats:
            logging.info("–ù–µ—Ç —á–∞—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            BROADCAST_SETTINGS['available_chats'] = {}
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞ –∏–∑ –±–∞–∑—ã
        for chat_id in list(bot_chats.keys()):
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
                chat_info = await bot.get_chat(chat_id)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —á–∞—Ç–∞
                try:
                    bot_member = await bot.get_chat_member(chat_id, bot.id)

                    # –ï—Å–ª–∏ –±–æ—Ç –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç –∏–ª–∏ –±—ã–ª –∏—Å–∫–ª—é—á–µ–Ω
                    if bot_member.status in ['left', 'kicked']:
                        await remove_bot_chat(chat_id)
                        removed_count += 1
                        logging.info(f"–£–¥–∞–ª–µ–Ω —á–∞—Ç {chat_id} - –±–æ—Ç –±–æ–ª—å—à–µ –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫")
                        continue

                    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                    members_count = 0
                    if chat_info.type in ['group', 'supergroup']:
                        try:
                            members_count = await bot.get_chat_member_count(chat_id)
                        except Exception as e:
                            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ {chat_id}: {e}")
                            members_count = bot_chats[chat_id].get('members_count', 0)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
                    chat_type_str = get_chat_type_string(chat_info.type)
                    await add_bot_chat(chat_id, chat_info.title or f"Chat {chat_id}", chat_type_str, members_count)
                    updated_chats[chat_id] = {
                        'title': chat_info.title or f"Chat {chat_id}",
                        'type': chat_info.type,
                        'members_count': members_count
                    }

                except Exception as e:
                    # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ –¥—Ä—É–≥–æ–π –º–µ—Ç–æ–¥
                    if "member not found" in str(e).lower() or "chat not found" in str(e).lower():
                        await remove_bot_chat(chat_id)
                        removed_count += 1
                        logging.warning(f"–£–¥–∞–ª–µ–Ω —á–∞—Ç {chat_id} - –±–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —á–∞—Ç–µ: {e}")
                    else:
                        # –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –æ—Å—Ç–∞–≤–ª—è–µ–º —á–∞—Ç, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—É
                        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ {chat_id}: {e}")
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞—Ç —Å —Ç–µ–∫—É—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                        updated_chats[chat_id] = bot_chats[chat_id]

            except Exception as e:
                # –ï—Å–ª–∏ —á–∞—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                if "chat not found" in str(e).lower():
                    await remove_bot_chat(chat_id)
                    removed_count += 1
                    logging.warning(f"–£–¥–∞–ª–µ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π —á–∞—Ç {chat_id}: {e}")
                else:
                    logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–∞—Ç–∞ {chat_id}: {e}")

        # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        BROADCAST_SETTINGS['available_chats'] = updated_chats

        logging.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ê–∫—Ç—É–∞–ª—å–Ω—ã—Ö: {len(updated_chats)}, —É–¥–∞–ª–µ–Ω–æ: {removed_count}")

    except Exception as e:
        logging.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —á–∞—Ç–æ–≤: {e}")


def get_chat_type_string(chat_type):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —á–∞—Ç–∞"""
    if hasattr(chat_type, 'value'):
        return chat_type.value
    return str(chat_type)


async def update_chat_info_from_message(message: Message):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        if message.chat.type in [ChatType.GROUP, ChatType.SUPERGROUP]:
            members_count = await bot.get_chat_member_count(message.chat.id)
            chat_type_str = get_chat_type_string(message.chat.type)

            await add_bot_chat(
                message.chat.id,
                message.chat.title,
                chat_type_str,
                members_count
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
            BROADCAST_SETTINGS['available_chats'][message.chat.id] = {
                'title': message.chat.title,
                'type': chat_type_str,
                'members_count': members_count
            }

            logging.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ {message.chat.id}: {message.chat.title}")

    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ {message.chat.id}: {e}")


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
def is_admin(user_id: int) -> bool:
    return user_id == ADMIN_ID


# –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Ü–µ–ª–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏
async def calculate_broadcast_targets():
    """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (—Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞)"""
    total_targets = 0
    details = []

    # –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞ –≤ –ª–∏—á–∫—É
    if BROADCAST_SETTINGS['to_target_chat_members']:
        target_users = await get_target_chat_users()
        total_targets += len(target_users)
        details.append(f"üë§ –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞ (–≤ –ª–∏—á–∫—É): {len(target_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

    # –¶–µ–ª–µ–≤–æ–π —á–∞—Ç
    if BROADCAST_SETTINGS['to_target_chat']:
        total_targets += 1
        details.append(f"üí¨ –¶–µ–ª–µ–≤–æ–π —á–∞—Ç: 1 —á–∞—Ç")

    # –°–µ—Ç–∫–∞ —á–∞—Ç–æ–≤
    if BROADCAST_SETTINGS['to_network_chats']:
        if BROADCAST_SETTINGS['network_chat_mode'] == "all":
            chat_count = len(BROADCAST_SETTINGS['available_chats'])
            total_targets += chat_count
            details.append(f"üåê –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Ç—ã: {chat_count} —á–∞—Ç–æ–≤")
        elif BROADCAST_SETTINGS['network_chat_mode'] == "members_only":
            # –£—á–∞—Å—Ç–Ω–∏–∫–∏ –≤—Å–µ—Ö —á–∞—Ç–æ–≤ —Å–µ—Ç–∫–∏, –Ω–æ —Ç–æ–ª—å–∫–æ —Ç–µ, –∫—Ç–æ –≤ —Ü–µ–ª–µ–≤–æ–º —á–∞—Ç–µ
            all_members = set()
            for chat_id in BROADCAST_SETTINGS['available_chats'].keys():
                members = await get_chat_members(chat_id)
                all_members.update(members)

            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞
            target_chat_members = set(await get_target_chat_users())
            filtered_members = all_members.intersection(target_chat_members)

            total_targets += len(filtered_members)
            details.append(f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ —á–∞—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –∏–∑ —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞): {len(filtered_members)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        elif BROADCAST_SETTINGS['network_chat_mode'] == "specific_chats":
            selected_count = len(BROADCAST_SETTINGS['selected_chats'])
            total_targets += selected_count
            details.append(f"üéØ –í—ã–±—Ä–∞–Ω–Ω—ã–µ —á–∞—Ç—ã: {selected_count} —á–∞—Ç–æ–≤")

    return total_targets, details


# –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_admin_keyboard() -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¢ –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="create_broadcast")],
        [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏", callback_data="broadcast_settings")],
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —á–∞—Ç—ã", callback_data="update_chats")],
        [InlineKeyboardButton(text="üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", callback_data="sync_members")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="statistics")]
    ])
    return keyboard


# –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
def get_settings_keyboard() -> InlineKeyboardMarkup:
    mode_text = {
        "all": "–í—Å–µ —á–∞—Ç—ã",
        "members_only": "–¢–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∏–∑ —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞",
        "specific_chats": "–í—ã–±—Ä–∞–Ω–Ω—ã–µ —á–∞—Ç—ã"
    }

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text=f"üë§ –£—á–∞—Å—Ç–Ω–∏–∫–∞–º —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞: {'‚úÖ' if BROADCAST_SETTINGS['to_target_chat_members'] else '‚ùå'}",
            callback_data="toggle_target_members"
        )],
        [InlineKeyboardButton(
            text=f"üí¨ –¶–µ–ª–µ–≤–æ–π —á–∞—Ç: {'‚úÖ' if BROADCAST_SETTINGS['to_target_chat'] else '‚ùå'}",
            callback_data="toggle_target_chat"
        )],
        [InlineKeyboardButton(
            text=f"üåê –°–µ—Ç–∫–∞ —á–∞—Ç–æ–≤: {'‚úÖ' if BROADCAST_SETTINGS['to_network_chats'] else '‚ùå'}",
            callback_data="toggle_network"
        )],
        [InlineKeyboardButton(
            text=f"üìã –†–µ–∂–∏–º —Å–µ—Ç–∫–∏: {mode_text.get(BROADCAST_SETTINGS['network_chat_mode'], '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}",
            callback_data="change_network_mode"
        )],
        [InlineKeyboardButton(text="üéØ –í—ã–±—Ä–∞—Ç—å —á–∞—Ç—ã", callback_data="select_chats")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
    ])
    return keyboard


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ä–µ–∂–∏–º–æ–≤ —Å–µ—Ç–∫–∏
def get_network_mode_keyboard() -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üåê –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Ç—ã", callback_data="mode_all")],
        [InlineKeyboardButton(text="üë• –¢–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∏–∑ —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞", callback_data="mode_members_only")],
        [InlineKeyboardButton(text="üéØ –í—ã–±—Ä–∞–Ω–Ω—ã–µ —á–∞—Ç—ã", callback_data="mode_specific")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="broadcast_settings")]
    ])
    return keyboard


# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ —á–∞—Ç–æ–≤
def get_chat_selection_keyboard(page: int = 0) -> InlineKeyboardMarkup:
    chats = BROADCAST_SETTINGS['available_chats']
    selected = BROADCAST_SETTINGS['selected_chats']

    buttons = []
    chats_per_page = 6
    start_idx = page * chats_per_page
    end_idx = start_idx + chats_per_page

    chat_items = list(chats.items())[start_idx:end_idx]

    for chat_id, chat_info in chat_items:
        is_selected = chat_id in selected
        title = chat_info['title'][:25] + "..." if len(chat_info['title']) > 25 else chat_info['title']

        button_text = f"{'‚úÖ' if is_selected else '‚ùå'} {title}"
        buttons.append([InlineKeyboardButton(
            text=button_text,
            callback_data=f"toggle_chat_{chat_id}"
        )])

    # –£–ø—Ä–∞–≤–ª—è—é—â–∏–µ –∫–Ω–æ–ø–∫–∏
    control_buttons = []
    control_buttons.append([
        InlineKeyboardButton(text="‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ", callback_data="select_all_chats"),
        InlineKeyboardButton(text="‚ùå –û—á–∏—Å—Ç–∏—Ç—å", callback_data="clear_selected_chats")
    ])

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"chat_page_{page - 1}"))
    if end_idx < len(chats):
        nav_buttons.append(InlineKeyboardButton(text="‚ñ∂Ô∏è –°–ª–µ–¥—É—é—â–∞—è", callback_data=f"chat_page_{page + 1}"))

    if nav_buttons:
        control_buttons.append(nav_buttons)

    control_buttons.append([InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="chat_selection_done")])

    buttons.extend(control_buttons)

    return InlineKeyboardMarkup(inline_keyboard=buttons)


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
def get_confirmation_keyboard() -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="confirm_broadcast"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_broadcast")
        ],
        [InlineKeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="edit_broadcast_text")]
    ])
    return keyboard


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(CommandStart())
async def start_handler(message: Message):
    user = message.from_user
    await add_user(user.id, user.username, user.first_name, user.last_name, user.is_bot)

    # –ï—Å–ª–∏ —ç—Ç–æ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
    if message.chat.type in [ChatType.GROUP, ChatType.SUPERGROUP]:
        try:
            members_count = await bot.get_chat_member_count(message.chat.id)
            await add_bot_chat(message.chat.id, message.chat.title, get_chat_type_string(message.chat.type), members_count)

            await add_chat_member(user.id, message.chat.id)
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ {message.chat.id}: {e}")

    if is_admin(user.id):
        await update_available_chats()
        await message.answer(
            "üîê **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å!**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_admin_keyboard(),
            parse_mode="Markdown"
        )
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞
        target_chat_members = await get_chat_members(TARGET_CHAT_ID)
        if user.id in target_chat_members:
            await message.answer(
                f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
                "–í—ã —É—á–∞—Å—Ç–Ω–∏–∫ —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞ –∏ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç –±–æ—Ç–∞."
            )
        else:
            await message.answer(
                f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
                "‚ö†Ô∏è –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –Ω–∞—à–µ–≥–æ —á–∞—Ç–∞."
            )


@dp.message(Command("admin"))
async def admin_handler(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.")
        return

    await update_available_chats()
    await message.answer(
        "üîê **–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_keyboard(),
        parse_mode="Markdown"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∫–Ω–æ–ø–æ–∫
@dp.callback_query(F.data == "create_broadcast")
async def create_broadcast_handler(callback: CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    await callback.message.edit_text(
        "üìù **–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏**\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n"
        "–†–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ **—Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞**.\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Markdown —Ä–∞–∑–º–µ—Ç–∫—É.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
        parse_mode="Markdown"
    )
    await state.set_state(AdminStates.waiting_broadcast_text)
    await callback.answer()


@dp.callback_query(F.data == "broadcast_settings")
async def settings_handler(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    mode_text = {
        "all": "–í—Å–µ —á–∞—Ç—ã",
        "members_only": "–¢–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∏–∑ —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞",
        "specific_chats": "–í—ã–±—Ä–∞–Ω–Ω—ã–µ —á–∞—Ç—ã"
    }

    settings_text = (
        "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏**\n\n"
        f"üë§ –£—á–∞—Å—Ç–Ω–∏–∫–∞–º —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞: {'‚úÖ –í–∫–ª—é—á–µ–Ω–æ' if BROADCAST_SETTINGS['to_target_chat_members'] else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ'}\n"
        f"üí¨ –¶–µ–ª–µ–≤–æ–π —á–∞—Ç: {'‚úÖ –í–∫–ª—é—á–µ–Ω–æ' if BROADCAST_SETTINGS['to_target_chat'] else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ'}\n"
        f"üåê –°–µ—Ç–∫–∞ —á–∞—Ç–æ–≤: {'‚úÖ –í–∫–ª—é—á–µ–Ω–æ' if BROADCAST_SETTINGS['to_network_chats'] else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ'}\n"
        f"üìã –†–µ–∂–∏–º —Å–µ—Ç–∫–∏: {mode_text.get(BROADCAST_SETTINGS['network_chat_mode'], '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        f"üéØ –í—ã–±—Ä–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤: {len(BROADCAST_SETTINGS['selected_chats'])}\n"
        f"üìä –î–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤: {len(BROADCAST_SETTINGS['available_chats'])}\n\n"
        f"‚ÑπÔ∏è **–í–∞–∂–Ω–æ:** –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞!"
    )

    await callback.message.edit_text(
        settings_text,
        reply_markup=get_settings_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()


@dp.callback_query(F.data == "update_chats")
async def update_chats_handler(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    await callback.answer("üîÑ –û–±–Ω–æ–≤–ª—è—é —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤...")

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–æ–æ–±—â–µ–Ω–∏–µ
    progress_msg = await callback.message.edit_text(
        "üîÑ **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤**\n\n"
        "–ü—Ä–æ–≤–µ—Ä—è—é –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å —á–∞—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...",
        parse_mode="Markdown"
    )

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤ –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    chats_before = len(BROADCAST_SETTINGS['available_chats'])

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    await update_available_chats()

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    chats_after = len(BROADCAST_SETTINGS['available_chats'])

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    if chats_after == 0:
        report_text = (
            f"üìã **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ**\n\n"
            f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤\n\n"
            f"**–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:**\n"
            f"‚Ä¢ –ë–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∏ –≤ –æ–¥–∏–Ω —á–∞—Ç\n"
            f"‚Ä¢ –ë–æ—Ç –±—ã–ª –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –≤—Å–µ—Ö —á–∞—Ç–æ–≤\n"
            f"‚Ä¢ –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ —á–∞—Ç—ã\n\n"
            f"**–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å —á–∞—Ç—ã:**\n"
            f"1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–æ–≤—ã–µ —á–∞—Ç—ã\n"
            f"2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –≤ —á–∞—Ç–µ —Å –±–æ—Ç–æ–º\n"
            f"3. –ù–∞–∂–º–∏—Ç–µ '–û–±–Ω–æ–≤–∏—Ç—å —á–∞—Ç—ã' —Å–Ω–æ–≤–∞"
        )
    else:
        chats_info = ""
        for chat_id, chat_info in list(BROADCAST_SETTINGS['available_chats'].items())[:5]:
            title = chat_info['title'][:25] + "..." if len(chat_info['title']) > 25 else chat_info['title']
            chats_info += f"‚Ä¢ {title} ({chat_info['members_count']} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)\n"

        if len(BROADCAST_SETTINGS['available_chats']) > 5:
            chats_info += f"‚Ä¢ ...–∏ –µ—â–µ {len(BROADCAST_SETTINGS['available_chats']) - 5} —á–∞—Ç–æ–≤\n"

        report_text = (
            f"‚úÖ **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ**\n\n"
            f"üìä –ë—ã–ª–æ —á–∞—Ç–æ–≤: {chats_before}\n"
            f"üìä –°—Ç–∞–ª–æ —á–∞—Ç–æ–≤: {chats_after}\n"
            f"üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {chats_after - chats_before:+d}\n\n"
            f"**–î–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Ç—ã:**\n{chats_info}"
        )

    await progress_msg.edit_text(
        report_text,
        reply_markup=get_admin_keyboard(),
        parse_mode="Markdown"
    )


@dp.message(F.content_type.in_({'new_chat_members'}))
async def new_member_handler(message: Message):
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —á–∞—Ç–∞—Ö"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –ª–∏ –±–æ—Ç–∞ –≤ —á–∞—Ç
    bot_added = any(user.id == bot.id for user in message.new_chat_members)

    for user in message.new_chat_members:
        if not user.is_bot:
            await add_chat_member(user.id, message.chat.id, "member")
            await add_user(user.id, user.username, user.first_name, user.last_name, user.is_bot)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
    if message.chat.type in [ChatType.GROUP, ChatType.SUPERGROUP]:
        await update_chat_info_from_message(message)

        # –ï—Å–ª–∏ –±–æ—Ç–∞ —Ç–æ–ª—å–∫–æ —á—Ç–æ –¥–æ–±–∞–≤–∏–ª–∏ –≤ —á–∞—Ç, –ª–æ–≥–∏—Ä—É–µ–º —ç—Ç–æ
        if bot_added:
            logging.info(f"–ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –Ω–æ–≤—ã–π —á–∞—Ç {message.chat.id}: {message.chat.title}")


@dp.callback_query(F.data == "statistics")
async def statistics_handler(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    stats = await get_user_statistics()

    chats_info = ""
    if BROADCAST_SETTINGS['available_chats']:
        for chat_id, chat_info in list(BROADCAST_SETTINGS['available_chats'].items())[:5]:
            title = chat_info['title'][:20] + "..." if len(chat_info['title']) > 20 else chat_info['title']
            chats_info += f"‚Ä¢ {title} ({chat_info['members_count']} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)\n"

        if len(BROADCAST_SETTINGS['available_chats']) > 5:
            chats_info += f"‚Ä¢ ...–∏ –µ—â–µ {len(BROADCAST_SETTINGS['available_chats']) - 5} —á–∞—Ç–æ–≤\n"
    else:
        chats_info = "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤\n\n**–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–≤:**\n1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–æ–≤—ã–µ —á–∞—Ç—ã\n2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –≤ —á–∞—Ç–µ\n3. –û–±–Ω–æ–≤–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤"

    stats_text = (
        f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞**\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω–∞—á–∞–≤—à–∏—Ö –¥–∏–∞–ª–æ–≥): {stats['users_count']}\n"
        f"üí¨ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞: {stats['target_chat_members']}\n"
        f"üéØ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞ —Å –¥–∏–∞–ª–æ–≥–æ–º: {stats['target_chat_users']}\n"
        f"üåê –î–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤: {len(BROADCAST_SETTINGS['available_chats'])}\n"
        f"üìù –í—ã–±—Ä–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤: {len(BROADCAST_SETTINGS['selected_chats'])}\n"
        f"üÜî ID —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞: `{TARGET_CHAT_ID}`\n\n"
        f"**–î–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Ç—ã:**\n{chats_info}\n\n"
        f"‚ÑπÔ∏è **–í–∞–∂–Ω–æ:** –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞!"
    )

    back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
    ])

    await callback.message.edit_text(
        stats_text,
        reply_markup=back_keyboard,
        parse_mode="Markdown"
    )
    await callback.answer()

# –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
@dp.callback_query(F.data.startswith("toggle_"))
async def toggle_settings_handler(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    setting = callback.data.replace("toggle_", "")

    if setting == "target_members":
        BROADCAST_SETTINGS['to_target_chat_members'] = not BROADCAST_SETTINGS['to_target_chat_members']
    elif setting == "target_chat":
        BROADCAST_SETTINGS['to_target_chat'] = not BROADCAST_SETTINGS['to_target_chat']
    elif setting == "network":
        BROADCAST_SETTINGS['to_network_chats'] = not BROADCAST_SETTINGS['to_network_chats']

    await callback.answer("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞!")
    await settings_handler(callback)


@dp.callback_query(F.data == "change_network_mode")
async def change_network_mode_handler(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    await callback.message.edit_text(
        "üìã **–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã —Å–µ—Ç–∫–∏ —á–∞—Ç–æ–≤:**\n\n"
        "üåê **–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Ç—ã** - —Ä–∞—Å—Å—ã–ª–∫–∞ –≤–æ –≤—Å–µ —á–∞—Ç—ã –≥–¥–µ –µ—Å—Ç—å –±–æ—Ç\n"
        "üë• **–¢–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∏–∑ —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞** - –≤ –ª–∏—á–∫—É —É—á–∞—Å—Ç–Ω–∏–∫–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –∏ –≤ –¥—Ä—É–≥–∏—Ö —á–∞—Ç–∞—Ö\n"
        "üéØ **–í—ã–±—Ä–∞–Ω–Ω—ã–µ —á–∞—Ç—ã** - —Ç–æ–ª—å–∫–æ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≤–∞–º–∏ —á–∞—Ç—ã\n\n"
        "‚ÑπÔ∏è **–í–∞–∂–Ω–æ:** –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ —Ä–∞—Å—Å—ã–ª–∫–∞ –∏–¥–µ—Ç —Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞!",
        reply_markup=get_network_mode_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()


@dp.callback_query(F.data.startswith("mode_"))
async def set_network_mode_handler(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    mode = callback.data.replace("mode_", "")
    BROADCAST_SETTINGS['network_chat_mode'] = mode

    await callback.answer("‚úÖ –†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω!")
    await settings_handler(callback)


@dp.callback_query(F.data == "select_chats")
async def select_chats_handler(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    if not BROADCAST_SETTINGS['available_chats']:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤. –û–±–Ω–æ–≤–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤.", show_alert=True)
        return

    await callback.message.edit_text(
        f"üéØ **–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏**\n\n"
        f"–í—ã–±—Ä–∞–Ω–æ: {len(BROADCAST_SETTINGS['selected_chats'])}/{len(BROADCAST_SETTINGS['available_chats'])}\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —á–∞—Ç, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å/–∏—Å–∫–ª—é—á–∏—Ç—å –µ–≥–æ –∏–∑ —Ä–∞—Å—Å—ã–ª–∫–∏.",
        reply_markup=get_chat_selection_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ —á–∞—Ç–æ–≤ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
@dp.callback_query(F.data.startswith("toggle_chat_"))
async def toggle_chat_handler(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    chat_id = int(callback.data.replace("toggle_chat_", ""))

    if chat_id in BROADCAST_SETTINGS['selected_chats']:
        BROADCAST_SETTINGS['selected_chats'].remove(chat_id)
        status = "–∏—Å–∫–ª—é—á–µ–Ω"
    else:
        BROADCAST_SETTINGS['selected_chats'].append(chat_id)
        status = "–¥–æ–±–∞–≤–ª–µ–Ω"

    await callback.answer(f"‚úÖ –ß–∞—Ç {status}!")

    await callback.message.edit_text(
        f"üéØ **–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏**\n\n"
        f"–í—ã–±—Ä–∞–Ω–æ: {len(BROADCAST_SETTINGS['selected_chats'])}/{len(BROADCAST_SETTINGS['available_chats'])}\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —á–∞—Ç, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å/–∏—Å–∫–ª—é—á–∏—Ç—å –µ–≥–æ –∏–∑ —Ä–∞—Å—Å—ã–ª–∫–∏.",
        reply_markup=get_chat_selection_keyboard(),
        parse_mode="Markdown"
    )


@dp.callback_query(F.data.startswith("chat_page_"))
async def chat_page_handler(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    page = int(callback.data.replace("chat_page_", ""))

    await callback.message.edit_text(
        f"üéØ **–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏**\n\n"
        f"–í—ã–±—Ä–∞–Ω–æ: {len(BROADCAST_SETTINGS['selected_chats'])}/{len(BROADCAST_SETTINGS['available_chats'])}\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —á–∞—Ç, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å/–∏—Å–∫–ª—é—á–∏—Ç—å –µ–≥–æ –∏–∑ —Ä–∞—Å—Å—ã–ª–∫–∏.",
        reply_markup=get_chat_selection_keyboard(page),
        parse_mode="Markdown"
    )
    await callback.answer()


@dp.callback_query(F.data == "select_all_chats")
async def select_all_chats_handler(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    BROADCAST_SETTINGS['selected_chats'] = list(BROADCAST_SETTINGS['available_chats'].keys())
    await callback.answer(f"‚úÖ –í—ã–±—Ä–∞–Ω—ã –≤—Å–µ —á–∞—Ç—ã ({len(BROADCAST_SETTINGS['selected_chats'])})")

    await callback.message.edit_text(
        f"üéØ **–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏**\n\n"
        f"–í—ã–±—Ä–∞–Ω–æ: {len(BROADCAST_SETTINGS['selected_chats'])}/{len(BROADCAST_SETTINGS['available_chats'])}\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —á–∞—Ç, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å/–∏—Å–∫–ª—é—á–∏—Ç—å –µ–≥–æ –∏–∑ —Ä–∞—Å—Å—ã–ª–∫–∏.",
        reply_markup=get_chat_selection_keyboard(),
        parse_mode="Markdown"
    )


@dp.callback_query(F.data == "clear_selected_chats")
async def clear_selected_chats_handler(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    BROADCAST_SETTINGS['selected_chats'].clear()
    await callback.answer("‚ùå –í—ã–±–æ—Ä –æ—á–∏—â–µ–Ω")

    await callback.message.edit_text(
        f"üéØ **–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏**\n\n"
        f"–í—ã–±—Ä–∞–Ω–æ: {len(BROADCAST_SETTINGS['selected_chats'])}/{len(BROADCAST_SETTINGS['available_chats'])}\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —á–∞—Ç, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å/–∏—Å–∫–ª—é—á–∏—Ç—å –µ–≥–æ –∏–∑ —Ä–∞—Å—Å—ã–ª–∫–∏.",
        reply_markup=get_chat_selection_keyboard(),
        parse_mode="Markdown"
    )


@dp.callback_query(F.data == "chat_selection_done")
async def chat_selection_done_handler(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    selected_count = len(BROADCAST_SETTINGS['selected_chats'])
    await callback.answer(f"‚úÖ –í—ã–±–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω! –í—ã–±—Ä–∞–Ω–æ —á–∞—Ç–æ–≤: {selected_count}")
    await settings_handler(callback)


@dp.callback_query(F.data == "back_to_admin")
async def back_to_admin_handler(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    await callback.message.edit_text(
        "üîê **–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.callback_query(F.data == "confirm_broadcast")
async def confirm_broadcast_handler(callback: CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    data = await state.get_data()
    broadcast_text = data.get('broadcast_text')

    if not broadcast_text:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        await state.clear()
        return

    await callback.answer("üöÄ –ó–∞–ø—É—Å–∫–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    await state.clear()

    await start_broadcast(callback.message, broadcast_text)


@dp.callback_query(F.data == "cancel_broadcast")
async def cancel_broadcast_handler(callback: CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    await state.clear()
    await callback.answer("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")

    await callback.message.edit_text(
        "‚ùå **–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_keyboard(),
        parse_mode="Markdown"
    )


@dp.callback_query(F.data == "edit_broadcast_text")
async def edit_broadcast_text_handler(callback: CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    await callback.message.edit_text(
        "üìù **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏**\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n"
        "–†–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ **—Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞**.\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Markdown —Ä–∞–∑–º–µ—Ç–∫—É.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
        parse_mode="Markdown"
    )
    await state.set_state(AdminStates.waiting_broadcast_text)
    await callback.answer()


# –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.message(AdminStates.waiting_broadcast_text)
async def broadcast_text_handler(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return

    if message.text == "/cancel":
        await message.answer(
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_admin_keyboard()
        )
        await state.clear()
        return

    broadcast_text = message.text
    await state.update_data(broadcast_text=broadcast_text)

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–¥ —Ä–∞—Å—Å—ã–ª–∫–æ–π
    sync_msg = await message.answer(
        "üîÑ **–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ**\n\n"
        "–ü—Ä–æ–≤–µ—Ä—è—é –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞...",
        parse_mode="Markdown"
    )

    async def update_sync_progress(text):
        try:
            await sync_msg.edit_text(
                f"üîÑ **–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ**\n\n{text}",
                parse_mode="Markdown"
            )
        except Exception:
            pass

    sync_result = await sync_target_chat_members(update_sync_progress)

    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    total_targets, details = await calculate_broadcast_targets()

    if total_targets == 0:
        await sync_msg.edit_text(
            "‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ!**\n\n"
            "–ù–µ –Ω–∞–π–¥–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n"
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n"
            "‚Ä¢ –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ü–µ–ª–µ–≤–æ–π —á–∞—Ç\n"
            "‚Ä¢ –£—á–∞—Å—Ç–Ω–∏–∫–∏ –Ω–∞—á–∞–ª–∏ –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º\n"
            "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤–∫–ª—é—á–µ–Ω—ã",
            reply_markup=get_admin_keyboard(),
            parse_mode="Markdown"
        )
        await state.clear()
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    preview_text = f"üìã **–ü—Ä–µ–≤—å—é —Ä–∞—Å—Å—ã–ª–∫–∏**\n\n"

    if sync_result:
        preview_text += f"üîÑ **–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:**\n"
        preview_text += f"‚Ä¢ –£–¥–∞–ª–µ–Ω–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {sync_result['removed_count']}\n\n"

    preview_text += f"**–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:**\n{broadcast_text[:200]}{'...' if len(broadcast_text) > 200 else ''}\n\n"
    preview_text += f"**–¶–µ–ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ (—Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞):**\n"
    preview_text += "\n".join(details)
    preview_text += f"\n\n**–í—Å–µ–≥–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:** {total_targets} —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
    preview_text += "‚ö†Ô∏è **–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?**\n\n"
    preview_text += f"‚ÑπÔ∏è **–¶–µ–ª–µ–≤–æ–π —á–∞—Ç:** `{TARGET_CHAT_ID}`"

    await sync_msg.edit_text(
        preview_text,
        reply_markup=get_confirmation_keyboard(),
        parse_mode="Markdown"
    )

    await state.set_state(AdminStates.confirming_broadcast)


# –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ - —Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞[1]
async def start_broadcast(message: Message, text: str):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–∞—Å—Å–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞"""

    success_count = 0
    error_count = 0
    total_targets = 0

    # –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ–æ–±—â–µ–Ω–∏–µ
    progress_msg = await message.answer("üöÄ **–ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏...**", parse_mode="Markdown")

    # –†–∞—Å—Å—ã–ª–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞ –≤ –ª–∏—á–∫—É
    if BROADCAST_SETTINGS['to_target_chat_members']:
        target_users = await get_target_chat_users()
        total_targets += len(target_users)

        await progress_msg.edit_text(
            f"üì§ **–†–∞—Å—Å—ã–ª–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞**\n"
            f"–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è {len(target_users)} —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –≤ –ª–∏—á–∫—É...",
            parse_mode="Markdown"
        )

        for user_id in target_users:
            try:
                await bot.send_message(user_id, text, parse_mode="Markdown")
                success_count += 1
                await asyncio.sleep(0.05)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
            except Exception as e:
                error_count += 1
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫—É —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞ {user_id}: {e}")

    # –†–∞—Å—Å—ã–ª–∫–∞ –≤ —Ü–µ–ª–µ–≤–æ–π —á–∞—Ç
    if BROADCAST_SETTINGS['to_target_chat']:
        total_targets += 1
        try:
            await bot.send_message(TARGET_CHAT_ID, text, parse_mode="Markdown")
            success_count += 1
        except Exception as e:
            error_count += 1
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —Ü–µ–ª–µ–≤–æ–π —á–∞—Ç {TARGET_CHAT_ID}: {e}")

    # –†–∞—Å—Å—ã–ª–∫–∞ –≤ —Å–µ—Ç–∫—É —á–∞—Ç–æ–≤
    if BROADCAST_SETTINGS['to_network_chats']:
        await progress_msg.edit_text(
            f"üåê **–†–∞—Å—Å—ã–ª–∫–∞ –≤ —Å–µ—Ç–∫—É —á–∞—Ç–æ–≤**\n"
            f"–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤...",
            parse_mode="Markdown"
        )

        target_chats = []

        if BROADCAST_SETTINGS['network_chat_mode'] == "all":
            target_chats = list(BROADCAST_SETTINGS['available_chats'].keys())
        elif BROADCAST_SETTINGS['network_chat_mode'] == "members_only":
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –¥—Ä—É–≥–∏—Ö —á–∞—Ç–∞—Ö (–≤ –ª–∏—á–∫—É)
            all_members = set()
            for chat_id in BROADCAST_SETTINGS['available_chats'].keys():
                members = await get_chat_members(chat_id)
                all_members.update(members)

            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞
            target_chat_members = set(await get_target_chat_users())
            filtered_members = all_members.intersection(target_chat_members)

            for user_id in filtered_members:
                try:
                    await bot.send_message(user_id, text, parse_mode="Markdown")
                    success_count += 1
                    await asyncio.sleep(0.05)
                except Exception as e:
                    error_count += 1
                    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫—É {user_id}: {e}")

            total_targets += len(filtered_members)
        elif BROADCAST_SETTINGS['network_chat_mode'] == "specific_chats":
            target_chats = BROADCAST_SETTINGS['selected_chats']

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —á–∞—Ç—ã
        if target_chats:
            total_targets += len(target_chats)

            await progress_msg.edit_text(
                f"üåê **–†–∞—Å—Å—ã–ª–∫–∞ –≤ —Å–µ—Ç–∫—É —á–∞—Ç–æ–≤**\n"
                f"–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ {len(target_chats)} —á–∞—Ç–æ–≤...",
                parse_mode="Markdown"
            )

            for chat_id in target_chats:
                try:
                    await bot.send_message(chat_id, text, parse_mode="Markdown")
                    success_count += 1
                    await asyncio.sleep(0.1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —á–∞—Ç–æ–≤
                except Exception as e:
                    error_count += 1
                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —á–∞—Ç {chat_id}: {e}")

    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    report_text = (
        f"üìä **–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
        f"‚ùå –û—à–∏–±–æ–∫: {error_count}\n"
        f"üéØ –í—Å–µ–≥–æ —Ü–µ–ª–µ–π: {total_targets}\n"
        f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(success_count / total_targets * 100):.1f}%" if total_targets > 0 else "üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: 0%"
                                                                                                f"\n\nüè∑Ô∏è **–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞**"
    )

    await progress_msg.edit_text(
        report_text,
        reply_markup=get_admin_keyboard(),
        parse_mode="Markdown"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —á–∞—Ç–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
@dp.message(F.content_type.in_({'new_chat_members'}))
async def new_member_handler(message: Message):
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —á–∞—Ç–∞—Ö"""
    for user in message.new_chat_members:
        if not user.is_bot:
            await add_chat_member(user.id, message.chat.id, "member")
            await add_user(user.id, user.username, user.first_name, user.last_name, user.is_bot)

    if message.chat.type in [ChatType.GROUP, ChatType.SUPERGROUP]:
        try:
            members_count = await bot.get_chat_member_count(message.chat.id)
            await add_bot_chat(message.chat.id, message.chat.title, get_chat_type_string(message.chat.type), members_count)

        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ {message.chat.id}: {e}")


@dp.message(F.content_type.in_({'left_chat_member'}))
async def left_member_handler(message: Message):
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –ø–æ–∫–∏–¥–∞—é—â–∏—Ö —á–∞—Ç—ã"""
    user = message.left_chat_member
    if not user.is_bot:
        await remove_chat_member(user.id, message.chat.id)
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç {message.chat.id}")


@dp.message(F.chat.type.in_([ChatType.GROUP, ChatType.SUPERGROUP]))
async def group_message_handler(message: Message):
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö"""
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
    user = message.from_user
    await add_user(user.id, user.username, user.first_name, user.last_name, user.is_bot)
    await add_chat_member(user.id, message.chat.id, "member")

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ (—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —á–∞—Å—Ç–æ—Ç—ã)
    await update_chat_info_from_message(message)


@dp.message(Command("addchat"))
async def add_current_chat_handler(message: Message):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π —á–∞—Ç –≤ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    if message.chat.type in [ChatType.GROUP, ChatType.SUPERGROUP]:
        try:
            await update_chat_info_from_message(message)
            await message.answer(
                f"‚úÖ –ß–∞—Ç '{message.chat.title}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤!\n"
                f"üÜî ID —á–∞—Ç–∞: `{message.chat.id}`",
                parse_mode="Markdown"
            )
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —á–∞—Ç–∞: {e}")
    else:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö.")



@dp.message(Command("cancel"))
async def cancel_handler(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return

    await state.clear()
    await message.answer(
        "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=get_admin_keyboard()
    )


# –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
async def close_db():
    global db_pool
    if db_pool:
        await db_pool.close()


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await init_db()
    await update_available_chats()
    logging.basicConfig(level=logging.INFO)

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    print(f"üîê –ê–¥–º–∏–Ω ID: {ADMIN_ID}")
    print(f"üéØ –¶–µ–ª–µ–≤–æ–π —á–∞—Ç: {TARGET_CHAT_ID}")
    print(f"üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {DB_CONFIG['database']}")
    print("‚ÑπÔ∏è  –†–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞!")

    try:
        await dp.start_polling(bot)
    finally:
        await close_db()


if __name__ == "__main__":
    asyncio.run(main())
